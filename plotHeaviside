import numpy as np
import matplotlib.pyplot as plt

def standard_heaviside(x):
    return np.where(x >= 0, 1.0, 0.0)

def smooth_heaviside(x, k=10):
    return 1.0 / (1.0 + np.exp(-k * x))

def regularized_heaviside(x, k=10):
    return 0.5 * (1.0 + np.tanh(k * x))

def polynomial_heaviside(x, delta=0.1):
    y = np.zeros_like(x)
    for i, xi in enumerate(x):
        if xi < -delta:
            y[i] = 0.0
        elif xi > delta:
            y[i] = 1.0
        else:
            y[i] = 0.5 + (xi / (2 * delta)) + (1.0 / (2.0 * np.pi)) * np.sin(np.pi * xi / delta)
    return y

def piecewise_linear_heaviside(x, delta=0.1):
    y = np.zeros_like(x)
    for i, xi in enumerate(x):
        if xi < -delta:
            y[i] = 0.0
        elif xi > delta:
            y[i] = 1.0
        else:
            y[i] = (xi + delta) / (2.0 * delta)
    return y

x = np.linspace(-1, 1, 500)
plt.figure(figsize=(10, 6))

plt.plot(x, standard_heaviside(x), label='Standard Heaviside', linestyle='--')
plt.plot(x, smooth_heaviside(x, k=10), label='Smooth Heaviside (k=10)')
plt.plot(x, regularized_heaviside(x, k=10), label='Regularized Heaviside (k=10)')
plt.plot(x, polynomial_heaviside(x, delta=0.1), label='Polynomial Heaviside (δ=0.1)')
plt.plot(x, piecewise_linear_heaviside(x, delta=0.1), label='Piecewise Linear Heaviside (δ=0.1)')

plt.title('Comparison of Heaviside Functions')
plt.xlabel('x')
plt.ylabel('Heaviside(x)')
plt.legend()
plt.grid(True)
plt.show()
